Parameters:
  RDSMasterUsername:
    NoEcho: 'true'
    Type: String
    MinLength: '1'
    MaxLength: '16'
    Default: "master"
  RDSMasterPassword:
    NoEcho: 'true'
    Type: String
    MinLength: '8'
    MaxLength: '20'
    Default: "hogehoge"
  RDSDBName:
    Type: String
    Default: "test"
Resources:
  RDSUserSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: rds_master_user
      SecretString: !Sub '{"username": "${RDSMasterUsername}", "password":"${RDSMasterPassword}"}'
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet Group for RDS
      DBSubnetGroupName: !Sub ${AWS::StackName}-sg-rds
      SubnetIds: 
         - !ImportValue PrivateSubnetOne
         - !ImportValue PrivateSubnetTwo
         - !ImportValue PrivateSubnetThree
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-sg-rds
  RDSCluster:
    DependsOn: 'RDSUserSecret'
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername: !Ref RDSMasterUsername
      MasterUserPassword: !Ref RDSMasterPassword
      Engine: aurora-postgresql
      DatabaseName: test
      DBSubnetGroupName: !Ref RDSSubnetGroup
      ServerlessV2ScalingConfiguration:
        MaxCapacity: 1
        MinCapacity: 0.5
      EnableHttpEndpoint: true
  RDSDBInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref RDSCluster
      DBInstanceClass: db.serverless
      DBParameterGroupName: 'postgres16-cron'
Outputs:
  OutputRDSUserSecretArn:
    Value: !Ref RDSUserSecret
    Export:
      Name: RDSUserSecretArn
  OutputRDSClusterArn:
    Value: !Ref RDSCluster
    Export:
      Name: RDSCluster
  OutputRDSDBName:
    Value: !Ref RDSDBName
    Export:
      Name: RDSDBName
